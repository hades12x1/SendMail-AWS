buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

group = 'vn.eway.adflex'
version = '1.0.0'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

if (project.hasProperty("eway_jfrog_username")) {
    project.ext.eway_jfrog_username = project.getProperty("eway_jfrog_username")
} else {
    project.ext.eway_jfrog_username = "eway_jfrog_username"
}

if (project.hasProperty("eway_jfrog_pwd")) {
    project.ext.eway_jfrog_pwd = project.getProperty("eway_jfrog_pwd")
} else {
    project.ext.eway_jfrog_pwd = "eway_jfrog_pwd"
}

allprojects {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url 'https://maven.google.com' }
        maven {
            url 'https://repo.eway.vn/artifactory/releases'
            credentials {
                username = "${eway_jfrog_username}"
                password = "${eway_jfrog_pwd}"
            }
        }
        maven {
            url 'https://repo.eway.vn/artifactory/snapshots'
            credentials {
                username = "${eway_jfrog_username}"
                password = "${eway_jfrog_pwd}"
            }
        }
        maven {
            url 'https://repo.eway.vn/artifactory/remote-repos'
            credentials {
                username = "${eway_jfrog_username}"
                password = "${eway_jfrog_pwd}"
            }
        }
        maven {
            url 'https://repo.eway.vn/artifactory/ewaypublic'
            credentials {
                username = "${eway_jfrog_username}"
                password = "${eway_jfrog_pwd}"
            }
        }

    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-activemq'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'

    compile group: 'javax.mail', name: 'mail', version: '1.5.0-b01'
    compile group: 'org.mongodb', name: 'bson', version: '4.1.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'

//    compile 'org.apache.logging.log4j:log4j-api:2.13.0'
//    compile 'org.apache.logging.log4j:log4j-core:2.13.0'

    compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.836'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.2'
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.5.Final'
}

apply plugin: 'docker'
apply plugin: 'application'
mainClassName = 'com.adflex.SentMailApplication'

applicationDefaultJvmArgs = [
        "-Dlogback.configurationFile=MY_APP_HOME/conf/log4j2.xml --spring.config.location=classpath:conf/application.properties",
        "-Xmx512m"
]

def confFolder = 'conf'
def productionSuffix = 'production'

if (project.hasProperty('env') && project.getProperty('env') == productionSuffix) {
    confFolder += "-$productionSuffix"
}

applicationDistribution.from(confFolder) {
    into "conf"
}

project.startScripts.with {
    doLast {
        unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME')
        windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%~dp0..')
    }
}
task unzip(type: Copy) {
    from(zipTree("$buildDir/distributions/${rootProject.name}-${version}.zip"))
    into "$buildDir/distributions/"
}

docker {
    baseImage "docker.eway.vn/io.x10.base/java:8-jre"
}

task buildDocker(type: Docker) {
    applicationName = "${rootProject.name}"
    registry = "docker.eway.vn"
    tag = "$registry/${project.group}/${applicationName}"
    println " === Building docker image: $tag:${version} === "
    addFile("$buildDir/distributions/${rootProject.name}-$version", "/opt/x10/app/")
    runCommand "cp /opt/x10/app/bin/${rootProject.name} /opt/x10/app/bin/start"
    if (project.hasProperty('pushDocker')) {
        println " === pushing image $tag:${version} to $registry === "
        push = project.hasProperty('pushDocker')
        println " === done pushing image $tag:${version} ==="

    }
}
buildDocker.dependsOn unzip

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}
